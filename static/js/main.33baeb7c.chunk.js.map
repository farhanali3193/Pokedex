{"version":3,"sources":["Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Container/App.js","serviceWorker.js","index.js"],"names":["CardList","Error","React","Component","SearchBox","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","App","onSearchChange","event","searchField","target","value","pokemons","pokemonDetails","fetch","then","resp","json","data","results","map","pokemon","url","temp","push","getPokemonDetails","filtered","filter","name","toLowerCase","includes","length","pokemonList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4NA6BeA,E,uKArBH,MAAM,IAAIC,MAAM,Y,GAJLC,IAAMC,WCMdC,EARG,YAA0B,IAAfC,EAAc,EAAdA,aACzB,OACI,yBAAKC,UAAY,OACb,2BAAOA,UAAY,mCAAmCC,KAAK,SAASC,YAAY,kBAAkBC,SAAWJ,MCK1GK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAAEC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCiBJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,4DAEJG,KAAKX,MAAMK,a,GAhBEd,IAAMC,WCmEnBqB,G,wDA7Db,aAAc,IAAD,8BACX,gBAgCFC,eAAiB,SAACC,GACf,EAAKH,SAAS,CAACI,YAAaD,EAAME,OAAOC,SAhC1C,EAAKX,MAAQ,CACbY,SAAU,GACVC,eAAgB,GAChBJ,YAAa,IALF,E,gEASM,IAAD,OAElBK,MADU,gDAETC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,EAAKb,SAAS,CAACO,SAAUM,EAAKC,UAC9B,EAAKnB,MAAMY,SAASQ,KAAI,SAAAC,GACrBP,MAAMO,EAAQC,KACdP,MAAK,SAAAC,GAAI,OAAGA,EAAKC,UACjBF,MAAK,SAAAG,GAEJ,IAAMK,EAAO,EAAKvB,MAAMa,eACxBU,EAAKC,KAAKN,GAGV,EAAKb,SAAS,CAACQ,eAAgBU,e,0CAMnCnB,KAAKqB,sB,+BAOE,IAAD,OACAC,EAAWtB,KAAKJ,MAAMa,eAAec,QAAO,SAACN,GACjD,GAAIA,EAAQO,KAAKC,cAAcC,SAAS,EAAK9B,MAAMS,YAAYoB,eAC7D,OAAOR,KAGX,OAAkC,IAA/BjB,KAAKJ,MAAMY,SAASmB,OACd,uCAGH,yBAAK3C,UAAY,MACf,wBAAIA,UAAY,MAAhB,aACA,kBAAC,EAAD,CAAWD,aAAgBiB,KAAKG,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUyB,YAAeN,W,GArDvB1C,IAAMC,Y,MCKJgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACEC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAM+C,a","file":"static/js/main.33baeb7c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nclass CardList extends React.Component {\r\n\r\n    render(){\r\n        if(true){\r\n            throw new Error('NOOO');\r\n        }\r\n        const pokemonArr = this.props.pokemonList.map(onePokemon => {\r\n            return (\r\n                <Card \r\n                    key = {onePokemon.id} \r\n                    name = {onePokemon.name} \r\n                    id = {onePokemon.id} \r\n                    height = {onePokemon.height} \r\n                    weight = {onePokemon.weight} \r\n                />\r\n            );\r\n        })\r\n        return (\r\n            <div>\r\n                {pokemonArr}\r\n            </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = function ({searchChange}){\r\n    return (\r\n        <div className = 'pa2'>\r\n            <input className = 'pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Pokemons' onChange= {searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflowY:'scroll', border: '2px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }        \r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>OOOOPS, Something went wrong</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundary';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n    pokemons: [],\n    pokemonDetails: [],\n    searchField: ''\n  }\n}\n\ngetPokemonDetails (){\n  let url = 'https://pokeapi.co/api/v2/pokemon/?limit=151';\n  fetch(url)\n  .then(resp => resp.json())\n  .then(data => {\n    this.setState({pokemons: data.results})\n    this.state.pokemons.map(pokemon => {\n       fetch(pokemon.url)\n      .then(resp=> resp.json())\n      .then(data => {\n        // console.log('data abilities:', data.abilities);\n        const temp = this.state.pokemonDetails;\n        temp.push(data);\n        // this.state.pokemonDetails.push(data);\n        // console.log('temp', temp);\n        this.setState({pokemonDetails: temp});\n      })\n    })\n  })\n}\n  componentDidMount(){\n    this.getPokemonDetails();\n  }\n\n  onSearchChange = (event) => {\n     this.setState({searchField: event.target.value})\n  }\n  \n  render(){\n    const filtered = this.state.pokemonDetails.filter((pokemon)=> {\n      if (pokemon.name.toLowerCase().includes(this.state.searchField.toLowerCase())) {\n        return pokemon;\n      }\n    })\n    if(this.state.pokemons.length === 0){\n      return <h1>LOADING</h1>\n    } else {\n        return (\n          <div className = 'tc'>\n            <h1 className = 'f1'> POKEDEX </h1>\n            <SearchBox searchChange = {this.onSearchChange}/>\n            <Scroll>\n              <ErrorBoundary>\n                <CardList pokemonList = {filtered} />\n              </ErrorBoundary>\n            </Scroll>\n          </div>\n        )\n      }\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}