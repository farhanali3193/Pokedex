{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Container/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","height","weight","newN","toUpperCase","newH","toFixed","newW","className","src","alt","width","CardList","pokemonArr","this","props","pokemonList","map","onePokemon","key","React","Component","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","children","ErrorBoundary","state","hasError","error","info","setState","App","onSearchChange","event","searchField","target","value","pokemons","pokemonDetails","fetch","then","resp","json","data","results","pokemon","url","prevState","getPokemonDetails","filter","toLowerCase","includes","sort","a","b","length","getFilteredSortedList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fc1c3670.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = function ({name, id, height, weight}){\r\n   let newN = name.toUpperCase();\r\n   let newH = (height*0.1).toFixed(2);\r\n   let newW = (weight*0.1).toFixed(2);\r\n    \r\n    return (\r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`} alt='Pokemon' width = '200px' height='200px'/>\r\n            <div>   \r\n                <h2> {newN} </h2>\r\n                <p> Id: {id}</p>    \r\n                <p> Height (metre): {newH} </p>\r\n                <p> Weight (kg): {newW}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;   \r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nclass CardList extends React.Component {\r\n\r\n    render(){\r\n        const pokemonArr = this.props.pokemonList.map(onePokemon => {\r\n            return (\r\n                <Card \r\n                    key = {onePokemon.id} \r\n                    name = {onePokemon.name} \r\n                    id = {onePokemon.id} \r\n                    height = {onePokemon.height} \r\n                    weight = {onePokemon.weight} \r\n                />\r\n            );\r\n        })\r\n        return (\r\n            <div>\r\n                {pokemonArr}\r\n            </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = function ({searchChange}){\r\n    return (\r\n        <div className = 'pa2'>\r\n            <input className = 'pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Pokemons' onChange= {searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflowY:'scroll', border: '2px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }        \r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>OOOOPS, Something went wrong</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundary';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      pokemons: [],\n      pokemonDetails: [],\n      searchField: ''\n    }\n  }\n\n  getPokemonDetails (){\n    let url = 'https://pokeapi.co/api/v2/pokemon/?limit=151';\n    fetch(url)\n    .then(resp => resp.json())\n    .then(data => {\n      this.setState({pokemons: data.results}, () => {\n        this.state.pokemons.map(pokemon => {\n          fetch(pokemon.url)\n          .then(resp=> resp.json())\n          .then(data => {\n            // const temp = this.state.pokemonDetails;\n            // temp.push(data);\n            // this.state.pokemonDetails.push(data);\n            this.setState((prevState)=> ({ pokemonDetails: [ ...prevState.pokemonDetails, data]}));\n          })\n        })\n      })\n    })\n  }\n  \n  componentDidMount(){\n    this.getPokemonDetails();\n  }\n\n  onSearchChange = (event) => {\n     this.setState({searchField: event.target.value})\n  }\n  \n  getFilteredSortedList(){\n    const filtered = this.state.pokemonDetails.filter((pokemon)=> {\n      if (pokemon.name.toLowerCase().includes(this.state.searchField.toLowerCase())) {\n        return pokemon;\n      }\n    })\n    return filtered.sort((a,b)=> a.id - b.id);\n  }\n  \n  render(){\n    \n    if(this.state.pokemons.length === 0){\n      return <h1>LOADING</h1>\n    } else {\n        return (\n          <div className = 'tc'>\n            <h1 className = 'f1'> POKEDEX </h1>\n            <SearchBox searchChange = {this.onSearchChange}/>\n            <Scroll>\n              <ErrorBoundary>\n                <CardList pokemonList = {this.getFilteredSortedList()} />\n              </ErrorBoundary>\n            </Scroll>\n          </div>\n        )\n      }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}